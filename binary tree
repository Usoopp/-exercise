# -*- coding: utf-8 -*-
"""
Created on Sat Sep 14 09:02:38 2019

@author: XiaoZh
"""

"""
本题有如下规律：
求和树的根节点 = 除本身外原二叉树所有子节点之和，
本题中根节点为中序遍历数组中正中间项（满二叉树）
递归求得左右子树，直到子树节点个数为1返回[0]。
需要考虑根节点在两侧的情况，树节点个数为0时，返回空[]
"""
def func(d):
    if len(d) == 1: return [0]
    elif len(d) == 0: return []
    mid = len(d) // 2  # 满二叉树根节点即正中间数值，前序遍历数组本题中用不到，可删除
    cctemp = func(d[:mid]) + [sum(d[:]) - d[mid]] + func(d[mid + 1:])
    # func+[sum-d]+func()  这里不是相加求和，而是相加构造成新的列表，最终返回的是一列数组列表
    return cctemp
 
if __name__ == "__main__":
#    a = list(map(int, input().strip().split()))      #前序遍历
#    d = list(map(int, input().strip().split()))      #中序遍历
    a = [10,-2,8,-4,6,7,5]
    d = [8,-2,-4,10,7,6,5]
    ans = func(d)
    print(' '.join(map(str, ans)))
